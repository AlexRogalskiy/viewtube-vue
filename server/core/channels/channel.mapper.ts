import { ChannelSourceDto } from './dto/channel-source.dto';
import { ChannelDto } from './dto/channel.dto';

export class ChannelMapper {
  static mapChannel(sourcea: any): ChannelDto {
    const source = ChannelSourceDto;
    const metadata = source.metadata;
    const header = source.header;
    const author = this.multiValue([
      metadata.channelMetadataRenderer.title,
      header.c4TabbedHeaderRenderer.title
    ]);
    const authorId = this.multiValue([
      header.c4TabbedHeaderRenderer.channelId,
      metadata.channelMetadataRenderer.externalId
    ]);
    const authorUsername = this.multiValue([
      metadata.channelMetadataRenderer.ownerUrls[0],
      header.c4TabbedHeaderRenderer.navigationEndpoint.commandMetadata.webCommandMetadata.url
        .replace('/c/', '')
        .replace('/u/', '')
    ]);
    const allowedRegions = metadata.channelMetadataRenderer.availableCountryCodes;
    const authorBanners = this.mapBanners(header.c4TabbedHeaderRenderer.banner.thumbnails);
    const authorThumbnails = null;
    const authorUrl = null;
    const autoGenerated = null;
    const description = null;
    const descriptionHtml = null;
    const isFamilyFriendly = null;
    const joined = null;
    const latestVideos = null;
    const paid = null;
    const relatedChannels = null;
    const subCount = null;
    const totalViews = null;

    const channel: ChannelDto = {
      author,
      authorId,
      authorUsername,
      allowedRegions,
      authorBanners,
      authorThumbnails,
      authorUrl,
      autoGenerated,
      description,
      descriptionHtml,
      isFamilyFriendly,
      joined,
      latestVideos,
      paid,
      relatedChannels,
      subCount,
      totalViews
    };
  }

  static multiValue(valueArray: Array<any>): any {
    let definedValue: any = null;
    valueArray.forEach((el: any) => {
      if (el) {
        definedValue = el;
      }
    });
    return definedValue;
  }

  static mapBanners(source: Array<{ url; width; height }>): Array<{ url; width; height }> {
    return source.map(el => {
      return {
        url: `https:${el.url}`,
        height: el.height,
        width: el.width
      };
    });
  }
}
